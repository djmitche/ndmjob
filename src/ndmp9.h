/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _NDMP9_H_RPCGEN
#define	_NDMP9_H_RPCGEN

#include <rpc/rpc.h>
#define ndmp9_u_quad unsigned long long

enum ndmp9_validity {
	NDMP9_VALIDITY_INVALID = 0,
	NDMP9_VALIDITY_VALID = 0 + 1,
	NDMP9_VALIDITY_MAYBE_INVALID = 0 + 2,
	NDMP9_VALIDITY_MAYBE_VALID = 0 + 3
};
typedef enum ndmp9_validity ndmp9_validity;
#define NDMP9_INVALID_U_LONG	0xFFFFFFFFul

struct ndmp9_valid_u_long {
	ndmp9_validity valid;
	u_long value;
};
typedef struct ndmp9_valid_u_long ndmp9_valid_u_long;
#define NDMP9_INVALID_U_QUAD	0xFFFFFFFFFFFFFFFFul

struct ndmp9_valid_u_quad {
	ndmp9_validity valid;
	ndmp9_u_quad value;
};
typedef struct ndmp9_valid_u_quad ndmp9_valid_u_quad;

struct ndmp9_pval {
	char *name;
	char *value;
};
typedef struct ndmp9_pval ndmp9_pval;

enum ndmp9_error {
	NDMP9_NO_ERR = 0,
	NDMP9_NOT_SUPPORTED_ERR = 1,
	NDMP9_DEVICE_BUSY_ERR = 2,
	NDMP9_DEVICE_OPENED_ERR = 3,
	NDMP9_NOT_AUTHORIZED_ERR = 4,
	NDMP9_PERMISSION_ERR = 5,
	NDMP9_DEV_NOT_OPEN_ERR = 6,
	NDMP9_IO_ERR = 7,
	NDMP9_TIMEOUT_ERR = 8,
	NDMP9_ILLEGAL_ARGS_ERR = 9,
	NDMP9_NO_TAPE_LOADED_ERR = 10,
	NDMP9_WRITE_PROTECT_ERR = 11,
	NDMP9_EOF_ERR = 12,
	NDMP9_EOM_ERR = 13,
	NDMP9_FILE_NOT_FOUND_ERR = 14,
	NDMP9_BAD_FILE_ERR = 15,
	NDMP9_NO_DEVICE_ERR = 16,
	NDMP9_NO_BUS_ERR = 17,
	NDMP9_XDR_DECODE_ERR = 18,
	NDMP9_ILLEGAL_STATE_ERR = 19,
	NDMP9_UNDEFINED_ERR = 20,
	NDMP9_XDR_ENCODE_ERR = 21,
	NDMP9_NO_MEM_ERR = 22,
	NDMP9_CONNECT_ERR = 23
};
typedef enum ndmp9_error ndmp9_error;

enum ndmp9_auth_type {
	NDMP9_AUTH_NONE = 0,
	NDMP9_AUTH_TEXT = 1,
	NDMP9_AUTH_MD5 = 2
};
typedef enum ndmp9_auth_type ndmp9_auth_type;

struct ndmp9_local_info {
	char *hostname;
	char *os_type;
	char *os_vers;
	char *hostid;
	char *vendor_name;
	char *product_name;
	char *revision_number;
};
typedef struct ndmp9_local_info ndmp9_local_info;
#define	NDMP9_NO_BACKUP_FILELIST 0x0001
#define	NDMP9_NO_BACKUP_FHINFO 0x0002
#define	NDMP9_NO_RECOVER_FILELIST 0x0004
#define	NDMP9_NO_RECOVER_FHINFO 0x0008
#define	NDMP9_NO_RECOVER_RESVD 0x0010
#define	NDMP9_NO_RECOVER_INC_ONLY 0x0020

struct ndmp9_config_get_butype_attr_request {
	char *name;
};
typedef struct ndmp9_config_get_butype_attr_request ndmp9_config_get_butype_attr_request;

struct ndmp9_config_get_butype_attr_reply {
	ndmp9_error error;
	u_long attrs;
};
typedef struct ndmp9_config_get_butype_attr_reply ndmp9_config_get_butype_attr_reply;

enum ndmp9_addr_type {
	NDMP9_ADDR_LOCAL = 0,
	NDMP9_ADDR_TCP = 1
};
typedef enum ndmp9_addr_type ndmp9_addr_type;

struct ndmp9_tcp_addr {
	u_long ip_addr;
	u_short port;
};
typedef struct ndmp9_tcp_addr ndmp9_tcp_addr;

struct ndmp9_addr {
	ndmp9_addr_type addr_type;
	union {
		ndmp9_tcp_addr tcp_addr;
	} ndmp9_addr_u;
};
typedef struct ndmp9_addr ndmp9_addr;

struct ndmp9_device_capability {
	char *device;
	u_long attr;
	struct {
		u_int capability_len;
		ndmp9_pval *capability_val;
	} capability;
};
typedef struct ndmp9_device_capability ndmp9_device_capability;

struct ndmp9_device_info {
	char *model;
	struct {
		u_int caplist_len;
		ndmp9_device_capability *caplist_val;
	} caplist;
};
typedef struct ndmp9_device_info ndmp9_device_info;

struct ndmp9_scsi_get_state_reply {
	ndmp9_error error;
	short target_controller;
	short target_id;
	short target_lun;
};
typedef struct ndmp9_scsi_get_state_reply ndmp9_scsi_get_state_reply;

enum ndmp9_tape_open_mode {
	NDMP9_TAPE_READ_MODE = 0,
	NDMP9_TAPE_RDWR_MODE = 1
};
typedef enum ndmp9_tape_open_mode ndmp9_tape_open_mode;

enum ndmp9_tape_state {
	NDMP9_TAPE_STATE_IDLE = 0,
	NDMP9_TAPE_STATE_OPEN = 1,
	NDMP9_TAPE_STATE_MOVER = 2
};
typedef enum ndmp9_tape_state ndmp9_tape_state;
#define	NDMP9_TAPE_NOREWIND 0x0008
#define	NDMP9_TAPE_WR_PROT 0x0010
#define	NDMP9_TAPE_ERROR 0x0020
#define	NDMP9_TAPE_UNLOAD 0x0040

struct ndmp9_tape_get_state_reply {
	ndmp9_error error;
	ndmp9_tape_state state;
	ndmp9_tape_open_mode open_mode;
	u_long flags;
	ndmp9_valid_u_long file_num;
	ndmp9_valid_u_long soft_errors;
	ndmp9_valid_u_long block_size;
	ndmp9_valid_u_long blockno;
	ndmp9_valid_u_quad total_space;
	ndmp9_valid_u_quad space_remain;
};
typedef struct ndmp9_tape_get_state_reply ndmp9_tape_get_state_reply;

enum ndmp9_tape_mtio_op {
	NDMP9_MTIO_FSF = 0,
	NDMP9_MTIO_BSF = 1,
	NDMP9_MTIO_FSR = 2,
	NDMP9_MTIO_BSR = 3,
	NDMP9_MTIO_REW = 4,
	NDMP9_MTIO_EOF = 5,
	NDMP9_MTIO_OFF = 6
};
typedef enum ndmp9_tape_mtio_op ndmp9_tape_mtio_op;

enum ndmp9_mover_state {
	NDMP9_MOVER_STATE_IDLE = 0,
	NDMP9_MOVER_STATE_LISTEN = 1,
	NDMP9_MOVER_STATE_ACTIVE = 2,
	NDMP9_MOVER_STATE_PAUSED = 3,
	NDMP9_MOVER_STATE_HALTED = 4,
	NDMP9_MOVER_STATE_STANDBY = 5
};
typedef enum ndmp9_mover_state ndmp9_mover_state;

enum ndmp9_mover_mode {
	NDMP9_MOVER_MODE_READ = 0,
	NDMP9_MOVER_MODE_WRITE = 1
};
typedef enum ndmp9_mover_mode ndmp9_mover_mode;

enum ndmp9_mover_pause_reason {
	NDMP9_MOVER_PAUSE_NA = 0,
	NDMP9_MOVER_PAUSE_EOM = 1,
	NDMP9_MOVER_PAUSE_EOF = 2,
	NDMP9_MOVER_PAUSE_SEEK = 3,
	NDMP9_MOVER_PAUSE_MEDIA_ERROR = 4,
	NDMP9_MOVER_PAUSE_EOW = 5
};
typedef enum ndmp9_mover_pause_reason ndmp9_mover_pause_reason;

enum ndmp9_mover_halt_reason {
	NDMP9_MOVER_HALT_NA = 0,
	NDMP9_MOVER_HALT_CONNECT_CLOSED = 1,
	NDMP9_MOVER_HALT_ABORTED = 2,
	NDMP9_MOVER_HALT_INTERNAL_ERROR = 3,
	NDMP9_MOVER_HALT_CONNECT_ERROR = 4
};
typedef enum ndmp9_mover_halt_reason ndmp9_mover_halt_reason;

struct ndmp9_mover_get_state_reply {
	ndmp9_error error;
	ndmp9_mover_state state;
	ndmp9_mover_mode mode;
	ndmp9_mover_pause_reason pause_reason;
	ndmp9_mover_halt_reason halt_reason;
	u_long record_size;
	u_long record_num;
	ndmp9_u_quad bytes_moved;
	ndmp9_u_quad seek_position;
	ndmp9_u_quad bytes_left_to_read;
	ndmp9_u_quad window_offset;
	ndmp9_u_quad window_length;
	ndmp9_addr data_connection_addr;
};
typedef struct ndmp9_mover_get_state_reply ndmp9_mover_get_state_reply;

enum ndmp9_data_operation {
	NDMP9_DATA_OP_NOACTION = 0,
	NDMP9_DATA_OP_BACKUP = 1,
	NDMP9_DATA_OP_RESTORE = 2,
	NDMP9_DATA_OP_RESTORE_FILEHIST = 3
};
typedef enum ndmp9_data_operation ndmp9_data_operation;

enum ndmp9_data_state {
	NDMP9_DATA_STATE_IDLE = 0,
	NDMP9_DATA_STATE_ACTIVE = 1,
	NDMP9_DATA_STATE_HALTED = 2,
	NDMP9_DATA_STATE_LISTEN = 3,
	NDMP9_DATA_STATE_CONNECTED = 4
};
typedef enum ndmp9_data_state ndmp9_data_state;

enum ndmp9_data_halt_reason {
	NDMP9_DATA_HALT_NA = 0,
	NDMP9_DATA_HALT_SUCCESSFUL = 1,
	NDMP9_DATA_HALT_ABORTED = 2,
	NDMP9_DATA_HALT_INTERNAL_ERROR = 3,
	NDMP9_DATA_HALT_CONNECT_ERROR = 4
};
typedef enum ndmp9_data_halt_reason ndmp9_data_halt_reason;

struct ndmp9_data_get_state_reply {
	ndmp9_error error;
	ndmp9_data_operation operation;
	ndmp9_data_state state;
	ndmp9_data_halt_reason halt_reason;
	ndmp9_u_quad bytes_processed;
	ndmp9_valid_u_quad est_bytes_remain;
	ndmp9_valid_u_long est_time_remain;
	ndmp9_addr data_connection_addr;
	ndmp9_u_quad read_offset;
	ndmp9_u_quad read_length;
};
typedef struct ndmp9_data_get_state_reply ndmp9_data_get_state_reply;

struct ndmp9_name {
	char *name;
	char *dest;
	ndmp9_u_quad fh_info;
};
typedef struct ndmp9_name ndmp9_name;

struct ndmp9_notify_mover_paused_request {
	ndmp9_mover_pause_reason reason;
	ndmp9_u_quad seek_position;
};
typedef struct ndmp9_notify_mover_paused_request ndmp9_notify_mover_paused_request;

struct ndmp9_notify_data_read_request {
	ndmp9_u_quad offset;
	ndmp9_u_quad length;
};
typedef struct ndmp9_notify_data_read_request ndmp9_notify_data_read_request;

enum ndmp9_file_type {
	NDMP9_FILE_DIR = 0,
	NDMP9_FILE_FIFO = 1,
	NDMP9_FILE_CSPEC = 2,
	NDMP9_FILE_BSPEC = 3,
	NDMP9_FILE_REG = 4,
	NDMP9_FILE_SLINK = 5,
	NDMP9_FILE_SOCK = 6,
	NDMP9_FILE_REGISTRY = 7,
	NDMP9_FILE_OTHER = 8
};
typedef enum ndmp9_file_type ndmp9_file_type;

struct ndmp9_file_stat {
	ndmp9_file_type ftype;
	ndmp9_valid_u_long mtime;
	ndmp9_valid_u_long atime;
	ndmp9_valid_u_long ctime;
	ndmp9_valid_u_long uid;
	ndmp9_valid_u_long gid;
	ndmp9_valid_u_long mode;
	ndmp9_valid_u_quad size;
	ndmp9_valid_u_long links;
	ndmp9_valid_u_quad node;
	ndmp9_valid_u_quad fh_info;
};
typedef struct ndmp9_file_stat ndmp9_file_stat;

/* the xdr functions */
extern bool_t xdr_ndmp9_validity();
extern bool_t xdr_ndmp9_valid_u_long();
extern bool_t xdr_ndmp9_valid_u_quad();
extern bool_t xdr_ndmp9_pval();
extern bool_t xdr_ndmp9_error();
extern bool_t xdr_ndmp9_auth_type();
extern bool_t xdr_ndmp9_local_info();
extern bool_t xdr_ndmp9_config_get_butype_attr_request();
extern bool_t xdr_ndmp9_config_get_butype_attr_reply();
extern bool_t xdr_ndmp9_addr_type();
extern bool_t xdr_ndmp9_tcp_addr();
extern bool_t xdr_ndmp9_addr();
extern bool_t xdr_ndmp9_device_capability();
extern bool_t xdr_ndmp9_device_info();
extern bool_t xdr_ndmp9_scsi_get_state_reply();
extern bool_t xdr_ndmp9_tape_open_mode();
extern bool_t xdr_ndmp9_tape_state();
extern bool_t xdr_ndmp9_tape_get_state_reply();
extern bool_t xdr_ndmp9_tape_mtio_op();
extern bool_t xdr_ndmp9_mover_state();
extern bool_t xdr_ndmp9_mover_mode();
extern bool_t xdr_ndmp9_mover_pause_reason();
extern bool_t xdr_ndmp9_mover_halt_reason();
extern bool_t xdr_ndmp9_mover_get_state_reply();
extern bool_t xdr_ndmp9_data_operation();
extern bool_t xdr_ndmp9_data_state();
extern bool_t xdr_ndmp9_data_halt_reason();
extern bool_t xdr_ndmp9_data_get_state_reply();
extern bool_t xdr_ndmp9_name();
extern bool_t xdr_ndmp9_notify_mover_paused_request();
extern bool_t xdr_ndmp9_notify_data_read_request();
extern bool_t xdr_ndmp9_file_type();
extern bool_t xdr_ndmp9_file_stat();

#endif /* !_NDMP9_H_RPCGEN */
